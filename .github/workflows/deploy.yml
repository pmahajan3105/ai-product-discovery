# =================================================================
# FEEDBACKHUB CI/CD PIPELINE
# Automated testing, building, and deployment
# =================================================================

name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: feedbackhub

jobs:
  # =================================================================
  # TESTING AND VALIDATION
  # =================================================================
  test:
    name: Test & Validate
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: feedbackhub_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run linting
        run: |
          cd apps/api && npm run lint
          cd ../web && npm run lint

      - name: Run type checking
        run: |
          cd apps/api && npm run type-check
          cd ../web && npm run type-check

      - name: Run unit tests
        run: |
          cd apps/api && npm test
          cd ../web && npm test
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/feedbackhub_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

      - name: Run integration tests
        run: |
          cd apps/api && npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/feedbackhub_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Security audit
        run: npm audit --audit-level=moderate

  # =================================================================
  # BUILD AND PUSH IMAGES
  # =================================================================
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write

    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
      api-digest: ${{ steps.build-api.outputs.digest }}
      web-digest: ${{ steps.build-web.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract Web metadata
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: .
          target: api-runtime
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Web image
        id: build-web
        uses: docker/build-push-action@v5
        with:
          context: .
          target: web-runtime
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # =================================================================
  # STAGING DEPLOYMENT
  # =================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'
    
    environment:
      name: staging
      url: https://staging.feedbackhub.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "API Image: ${{ needs.build.outputs.api-image }}"
          echo "Web Image: ${{ needs.build.outputs.web-image }}"
          # Add actual staging deployment commands here

  # =================================================================
  # PRODUCTION DEPLOYMENT
  # =================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    environment:
      name: production
      url: https://app.feedbackhub.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            mkdir -p /opt/feedbackhub/releases/$(date +%Y%m%d_%H%M%S)
            ln -sfn /opt/feedbackhub/releases/$(date +%Y%m%d_%H%M%S) /opt/feedbackhub/current
          "

      - name: Copy deployment files
        run: |
          scp -r docker-compose.yml nginx/ scripts/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/feedbackhub/current/

      - name: Create production environment file
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            cd /opt/feedbackhub/current
            cat > .env.production << 'EOF'
            NODE_ENV=production
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            SUPERTOKENS_CONNECTION_URI=${{ secrets.SUPERTOKENS_CONNECTION_URI }}
            SUPERTOKENS_API_KEY=${{ secrets.SUPERTOKENS_API_KEY }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            API_SECRET_KEY=${{ secrets.API_SECRET_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            EOF
          "

      - name: Update Docker Compose with new images
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            cd /opt/feedbackhub/current
            sed -i 's|image: .*feedbackhub/api.*|image: ${{ needs.build.outputs.api-image }}|g' docker-compose.yml
            sed -i 's|image: .*feedbackhub/web.*|image: ${{ needs.build.outputs.web-image }}|g' docker-compose.yml
          "

      - name: Deploy to production
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            cd /opt/feedbackhub/current
            chmod +x scripts/deploy.sh
            ./scripts/deploy.sh --monitoring
          "

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://app.feedbackhub.com/health
          curl -f https://api.feedbackhub.com/health

      - name: Notify deployment success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ FeedbackHub deployed successfully to production\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ FeedbackHub deployment failed\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nCheck: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  # =================================================================
  # SECURITY SCANNING
  # =================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.api-image }}
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Upload API Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-api-results.sarif'

      - name: Run Trivy on Web image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.web-image }}
          format: 'sarif'
          output: 'trivy-web-results.sarif'

      - name: Upload Web Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-web-results.sarif'